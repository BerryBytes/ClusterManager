name: Multi-language Lint

on:
  push:
    paths:
      - 'cluster-api/**'
      - 'cluster-service/**'
      - 'cluster-status/**'
      - 'cluster-ui/**'
    branches:
      - '**'  # Run on all branches
  pull_request:
    paths:
      - 'cluster-api/**'
      - 'cluster-service/**'
      - 'cluster-status/**'
      - 'cluster-ui/**'
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      cluster-api: ${{ steps.filter.outputs.cluster-api }}
      cluster-service: ${{ steps.filter.outputs.cluster-service }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            cluster-api:
              - 'cluster-api/**/*.py'
            cluster-service:
              - 'cluster-service/**/*.py'

  lint-cluster-api:
    needs: changes
    if: needs.changes.outputs.cluster-api == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: cluster-api/**/*.py

      - name: Set up Python
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python linting tools
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: cluster-api
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint

      - name: Run Pylint
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: cluster-api
        run: |
          echo "Changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | xargs pylint || echo "Linting completed with warnings"

      - name: Run Black
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: cluster-api
        run: |
          echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | xargs black --check

      - name: Run isort
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: cluster-api
        run: |
          echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | xargs isort --check-only --diff

  lint-cluster-service:
    needs: changes
    if: needs.changes.outputs.cluster-service == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: cluster-service/**/*.py

      - name: Set up Python
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python linting tools
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: cluster-service
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint

      - name: Run Pylint
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: cluster-service
        run: |
          echo "Changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | xargs pylint || echo "Linting completed with warnings"

      - name: Run Black
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: cluster-service
        run: |
          echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | xargs black --check

      - name: Run isort
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: cluster-service
        run: |
          echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | xargs isort --check-only --diff

  # go-lint:
  #   needs: changes
  #   if: needs.changes.outputs.cluster-status == 'true' && !contains(github.event.head_commit.modified, '*.py')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.22'
  #         cache: true

  #     - name: Install Go tools
  #       run: |
  #         go install golang.org/x/tools/cmd/goimports@latest
  #         go install honnef.co/go/tools/cmd/staticcheck@latest
  #         go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  #         echo "$HOME/go/bin" >> $GITHUB_PATH

  #     - name: Go Format Check
  #       working-directory: cluster-status
  #       run: |
  #         if [ -n "$(gofmt -l .)" ]; then
  #           echo "The following files need formatting:"
  #           gofmt -l .
  #           echo "Please run 'gofmt -w .' to format your code."
  #           exit 1
  #         fi

  #     - name: Go Imports Check
  #       working-directory: cluster-status
  #       run: |
  #         if [ -n "$(goimports -l .)" ]; then
  #           echo "The following files have incorrect imports:"
  #           goimports -l .
  #           echo "Please run 'goimports -w .' to fix imports."
  #           exit 1
  #         fi

  #     - name: Run golangci-lint
  #       working-directory: cluster-status
  #       run: golangci-lint run --timeout=5m

  #     - name: Run staticcheck
  #       working-directory: cluster-status
  #       run: staticcheck ./...

  # typescript-lint:
  #   needs: changes
  #   if: needs.changes.outputs.cluster-ui == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #         cache-dependency-path: cluster-ui/package-lock.json

  #     - name: Install Node.js dependencies
  #       working-directory: cluster-ui
  #       run: |
  #         npm install -g eslint@^8.56.0 typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
  #         npm ci

  #     - name: Lint TypeScript
  #       working-directory: cluster-ui
  #       run: |
  #         npx tsc --noEmit
  #         npx eslint "**/*.{ts,tsx}" --fix

  #     - name: Lint JavaScript
  #       working-directory: cluster-ui
  #       run: npx eslint "**/*.{js,jsx}" --fix