# name: Multi-language Lint

# on:
#   push:
#     paths:
#       - 'cluster-api/**'
#       - 'cluster-service/**'
#       - 'cluster-status/**'
#       - 'cluster-ui/**'
#     branches:
#       - '**'  # Run on all branches
#   pull_request:
#     paths:
#       - 'cluster-api/**'
#       - 'cluster-service/**'
#       - 'cluster-status/**'
#       - 'cluster-ui/**'
#   workflow_dispatch:

# jobs:
#   python-lint:
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         directory: [cluster-api, cluster-service]
    
#     steps:
#       - uses: actions/checkout@v4

#       # Check if directory contains Python files
#       - name: Check for Python files
#         id: check-python
#         run: |
#           if find ${{ matrix.directory }} -name "*.py" -print -quit | grep -q .; then
#             echo "has_python_files=true" >> $GITHUB_OUTPUT
#           else
#             echo "has_python_files=false" >> $GITHUB_OUTPUT
#           fi

#       - name: Set up Python
#         if: steps.check-python.outputs.has_python_files == 'true'
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.11'
#           cache: 'pip'
      
#       - name: Install Python linting tools
#         if: steps.check-python.outputs.has_python_files == 'true'
#         working-directory: ${{ matrix.directory }}
#         run: |
#           python -m pip install --upgrade pip
#           pip install flake8 black isort pylint

#       - name: Run Pylint
#         if: steps.check-python.outputs.has_python_files == 'true'
#         working-directory: ${{ matrix.directory }}
#         run: |
#           find . -type f -name "*.py" -not -path "*/\.*" -exec pylint {} + || echo "Linting completed with warnings"

#       # - name: Run Black
#       #   if: steps.check-python.outputs.has_python_files == 'true'
#       #   working-directory: ${{ matrix.directory }}
#       #   run: |
#       #     black --check .

#       # - name: Run isort
#       #   if: steps.check-python.outputs.has_python_files == 'true'
#       #   working-directory: ${{ matrix.directory }}
#       #   run: |
#       #     isort --check-only --diff .

 

#   # go-lint:
#   #   # needs: changes
#   #   if: needs.changes.outputs.cluster-status == 'true' && !contains(github.event.head_commit.modified, '*.py')
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - uses: actions/checkout@v4
      
#   #     - name: Set up Go
#   #       uses: actions/setup-go@v5
#   #       with:
#   #         go-version: '1.22'
#   #         cache: true

#   #     - name: Install Go tools
#   #       run: |
#   #         go install golang.org/x/tools/cmd/goimports@latest
#   #         go install honnef.co/go/tools/cmd/staticcheck@latest
#   #         go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
#   #         echo "$HOME/go/bin" >> $GITHUB_PATH

#   #     - name: Go Format Check
#   #       working-directory: cluster-status
#   #       run: |
#   #         if [ -n "$(gofmt -l .)" ]; then
#   #           echo "The following files need formatting:"
#   #           gofmt -l .
#   #           echo "Please run 'gofmt -w .' to format your code."
#   #           exit 1
#   #         fi

#   #     - name: Go Imports Check
#   #       working-directory: cluster-status
#   #       run: |
#   #         if [ -n "$(goimports -l .)" ]; then
#   #           echo "The following files have incorrect imports:"
#   #           goimports -l .
#   #           echo "Please run 'goimports -w .' to fix imports."
#   #           exit 1
#   #         fi

#   #     - name: Run golangci-lint
#   #       working-directory: cluster-status
#   #       run: golangci-lint run --timeout=5m

#   #     - name: Run staticcheck
#   #       working-directory: cluster-status
#   #       run: staticcheck ./...

#   # typescript-lint:
#   #   # needs: changes
#   #   if: needs.changes.outputs.cluster-ui == 'true'
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - uses: actions/checkout@v4
      
#   #     - name: Set up Node.js
#   #       uses: actions/setup-node@v4
#   #       with:
#   #         node-version: '20'
#   #         cache: 'npm'
#   #         cache-dependency-path: cluster-ui/package-lock.json

#   #     - name: Install Node.js dependencies
#   #       working-directory: cluster-ui
#   #       run: |
#   #         npm install -g eslint@^8.56.0 typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
#   #         npm ci

#   #     - name: Lint TypeScript
#   #       working-directory: cluster-ui
#   #       run: |
#   #         npx tsc --noEmit
#   #         npx eslint "**/*.{ts,tsx}" --fix

#   #     - name: Lint JavaScript
#   #       working-directory: cluster-ui
#   #       run: npx eslint "**/*.{js,jsx}" --fix



name: Multi-language Lint

on:
  push:
    paths:
      - 'cluster-api/**'
      - 'cluster-service/**'
      - 'cluster-status/**'
      - 'cluster-ui/**'
    branches:
      - '**'  # Run on all branches
  pull_request:
    paths:
      - 'cluster-api/**'
      - 'cluster-service/**'
      - 'cluster-status/**'
      - 'cluster-ui/**'
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      cluster-api: ${{ steps.filter.outputs.cluster-api }}
      cluster-service: ${{ steps.filter.outputs.cluster-service }}
      cluster-status: ${{ steps.filter.outputs.cluster-status }}
      cluster-ui: ${{ steps.filter.outputs.cluster-ui }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            cluster-api:
              - 'cluster-api/**'
            cluster-service:
              - 'cluster-service/**'
            cluster-status:
              - 'cluster-status/**'
            cluster-ui:
              - 'cluster-ui/**'

  python-lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: [cluster-api, cluster-service]
    
    steps:
      - uses: actions/checkout@v4

      # Check if directory contains Python files
      - name: Check for Python files
        id: check-python
        run: |
          if find ${{ matrix.directory }} -name "*.py" -print -quit | grep -q .; then
            echo "has_python_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_python_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check-python.outputs.has_python_files == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python linting tools
        if: steps.check-python.outputs.has_python_files == 'true'
        working-directory: ${{ matrix.directory }}
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint

      - name: Run Pylint
        if: steps.check-python.outputs.has_python_files == 'true'
        working-directory: ${{ matrix.directory }}
        run: |
          find . -type f -name "*.py" -not -path "*/\.*" -exec pylint {} + || echo "Linting completed with warnings"

      # - name: Run Black
      #   if: steps.check-python.outputs.has_python_files == 'true'
      #   working-directory: ${{ matrix.directory }}
      #   run: |
      #     black --check .

      # - name: Run isort
      #   if: steps.check-python.outputs.has_python_files == 'true'
      #   working-directory: ${{ matrix.directory }}
      #   run: |
      #     isort --check-only --diff .

  go-lint:
    needs: changes
    if: needs.changes.outputs.cluster-status == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Install Go tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Go Format Check
        working-directory: cluster-status
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "The following files need formatting:"
            gofmt -l .
            echo "Please run 'gofmt -w .' to format your code."
            exit 1
          fi

      - name: Go Imports Check
        working-directory: cluster-status
        run: |
          if [ -n "$(goimports -l .)" ]; then
            echo "The following files have incorrect imports:"
            goimports -l .
            echo "Please run 'goimports -w .' to fix imports."
            exit 1
          fi

      - name: Run golangci-lint
        working-directory: cluster-status
        run: golangci-lint run --timeout=5m

      - name: Run staticcheck
        working-directory: cluster-status
        run: staticcheck ./...

  typescript-lint:
    needs: changes
    if: needs.changes.outputs.cluster-ui == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cluster-ui/package-lock.json

      - name: Install Node.js dependencies
        working-directory: cluster-ui
        run: |
          npm install -g eslint@^8.56.0 typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
          npm ci

      - name: Lint TypeScript
        working-directory: cluster-ui
        run: |
          npx tsc --noEmit
          npx eslint "**/*.{ts,tsx}" --fix

      - name: Lint JavaScript
        working-directory: cluster-ui
        run: npx eslint "**/*.{js,jsx}" --fix



