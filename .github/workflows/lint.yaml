name: Multi-language Lint

on:
  push:
    paths:
      - 'cluster-api/**'
      - 'cluster-service/**'
      - 'cluster-status/**'
      - 'cluster-ui/**'
    branches:
      - '**'  
  pull_request:
    paths:
      - 'cluster-api/**'
      - 'cluster-service/**'
      - 'cluster-status/**'
      - 'cluster-ui/**'
  workflow_dispatch:

jobs:
  changed_files:
    runs-on: ubuntu-latest
    outputs:
      python_api_files: ${{ steps.filter-python-api.outputs.files }}
      python_service_files: ${{ steps.filter-python-service.outputs.files }}
      go_files: ${{ steps.filter-go.outputs.files }}
      typescript_files: ${{ steps.filter-ts.outputs.files }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get changed files in cluster-api
        id: filter-python-api
        uses: tj-actions/changed-files@v41
        with:
          files: cluster-api/**/*.py
          
      - name: Get changed files in cluster-service
        id: filter-python-service
        uses: tj-actions/changed-files@v41
        with:
          files: cluster-service/**/*.py
          
      - name: Get changed files in cluster-status
        id: filter-go
        uses: tj-actions/changed-files@v41
        with:
          files: |
            cluster-status/**/*.go
            
      - name: Get changed files in cluster-ui
        id: filter-ts
        uses: tj-actions/changed-files@v41
        with:
          files: |
            cluster-ui/**/*.ts
            cluster-ui/**/*.tsx
            cluster-ui/**/*.js
            cluster-ui/**/*.jsx

  cluster-api-lint:
    needs: changed_files
    if: needs.changed_files.outputs.python_api_files != '[]' && needs.changed_files.outputs.python_api_files != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python linting tools
        working-directory: cluster-api
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint

      - name: Run Pylint on changed files
        working-directory: cluster-api
        run: |
          echo "${{ needs.changed_files.outputs.python_api_files }}" | tr ' ' '\n' | xargs pylint || echo "Linting completed with warnings"

  cluster-service-lint:
    needs: changed_files
    if: needs.changed_files.outputs.python_service_files != '[]' && needs.changed_files.outputs.python_service_files != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python linting tools
        working-directory: cluster-service
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint

      - name: Run Pylint on changed files
        working-directory: cluster-service
        run: |
          echo "${{ needs.changed_files.outputs.python_service_files }}" | tr ' ' '\n' | xargs pylint || echo "Linting completed with warnings"

  cluster-status-lint:
    needs: changed_files
    if: needs.changed_files.outputs.go_files != '[]' && needs.changed_files.outputs.go_files != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Install Go tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Go Format Check
        working-directory: cluster-status
        run: |
          echo "${{ needs.changed_files.outputs.go_files }}" | tr ' ' '\n' | xargs gofmt -l 
          if [ $? -ne 0 ]; then
            echo "Please run 'gofmt -w' on the files listed above"
            exit 1
          fi

      - name: Go Imports Check
        working-directory: cluster-status
        run: |
          echo "${{ needs.changed_files.outputs.go_files }}" | tr ' ' '\n' | xargs goimports -l
          if [ $? -ne 0 ]; then
            echo "Please run 'goimports -w' on the files listed above"
            exit 1
          fi

      - name: Run golangci-lint
        working-directory: cluster-status
        run: golangci-lint run ${{ needs.changed_files.outputs.go_files }}

      - name: Run staticcheck
        working-directory: cluster-status
        run: echo "${{ needs.changed_files.outputs.go_files }}" | tr ' ' '\n' | xargs staticcheck

  cluster-ui-lint:
    needs: changed_files
    if: needs.changed_files.outputs.typescript_files != '[]' && needs.changed_files.outputs.typescript_files != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cluster-ui/package-lock.json

      - name: Install Node.js dependencies
        working-directory: cluster-ui
        run: |
          npm install -g eslint@^8.56.0 typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
          npm ci

      - name: Lint TypeScript/JavaScript files
        working-directory: cluster-ui
        run: |
          npx tsc --noEmit
          echo "${{ needs.changed_files.outputs.typescript_files }}" | tr ' ' '\n' | xargs npx eslint --fix






















  

# name: Multi-language Lint

# on:
#   push:
#     branches:
#       - '**'  # Run on all branches
#     paths:
#       - 'cluster-api/**'
#       - 'cluster-service/**'
#       - 'cluster-status/**'
#       - 'cluster-ui/**'
#   pull_request:
#     paths:
#       - 'cluster-api/**'
#       - 'cluster-service/**'
#       - 'cluster-status/**'
#       - 'cluster-ui/**'
#   workflow_dispatch:

# jobs:
#   detect-changes:
#     runs-on: ubuntu-latest
#     outputs:
#       python-api: ${{ steps.changes.outputs.python-api }}
#       python-service: ${{ steps.changes.outputs.python-service }}
#       go-status: ${{ steps.changes.outputs.go-status }}
#       ts-ui: ${{ steps.changes.outputs.ts-ui }}
#     steps:
#       - uses: actions/checkout@v4
#       - id: changes
#         name: Detect file changes
#         run: |
#           # Get changed files
#           if [[ "${{ github.event_name }}" == "pull_request" ]]; then
#             CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
#           else
#             CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
#           fi

#           # Check each directory for changes
#           echo "python-api=$([[ $(echo "$CHANGED_FILES" | grep -E "^cluster-api/.*") ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
#           echo "python-service=$([[ $(echo "$CHANGED_FILES" | grep -E "^cluster-service/.*") ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
#           echo "go-status=$([[ $(echo "$CHANGED_FILES" | grep -E "^cluster-status/.*") ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
#           echo "ts-ui=$([[ $(echo "$CHANGED_FILES" | grep -E "^cluster-ui/.*") ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

#   python-lint-api:
#     needs: detect-changes
#     if: needs.detect-changes.outputs.python-api == 'true'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-python@v5
#         with:
#           python-version: '3.11'
#           cache: 'pip'
#       - name: Install Python linting tools
#         working-directory: cluster-api
#         run: |
#           python -m pip install --upgrade pip
#           pip install flake8 black isort pylint
#       - name: Run Pylint
#         working-directory: cluster-api
#         run: |
#           find . -type f -name "*.py" -not -path "*/\.*" -exec pylint {} + || echo "Linting completed with warnings"

#   python-lint-service:
#     needs: detect-changes
#     if: needs.detect-changes.outputs.python-service == 'true'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-python@v5
#         with:
#           python-version: '3.11'
#           cache: 'pip'
#       - name: Install Python linting tools
#         working-directory: cluster-service
#         run: |
#           python -m pip install --upgrade pip
#           pip install flake8 black isort pylint
#       - name: Run Pylint
#         working-directory: cluster-service
#         run: |
#           find . -type f -name "*.py" -not -path "*/\.*" -exec pylint {} + || echo "Linting completed with warnings"

#   go-lint:
#     needs: detect-changes
#     if: needs.detect-changes.outputs.go-status == 'true'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-go@v5
#         with:
#           go-version: '1.22'
#           cache: true
#       - name: Install Go tools
#         run: |
#           go install golang.org/x/tools/cmd/goimports@latest
#           go install honnef.co/go/tools/cmd/staticcheck@latest
#           go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
#           echo "$HOME/go/bin" >> $GITHUB_PATH
#       - name: Go Format Check
#         working-directory: cluster-status
#         run: |
#           if [ -n "$(gofmt -l .)" ]; then
#             echo "The following files need formatting:"
#             gofmt -l .
#             echo "Please run 'gofmt -w .' to format your code."
#             exit 1
#           fi
#       - name: Go Imports Check
#         working-directory: cluster-status
#         run: |
#           if [ -n "$(goimports -l .)" ]; then
#             echo "The following files have incorrect imports:"
#             goimports -l .
#             echo "Please run 'goimports -w .' to fix imports."
#             exit 1
#           fi
#       - name: Run golangci-lint
#         working-directory: cluster-status
#         run: golangci-lint run --timeout=5m
#       - name: Run staticcheck
#         working-directory: cluster-status
#         run: staticcheck ./...

#   typescript-lint:
#     needs: detect-changes
#     if: needs.detect-changes.outputs.ts-ui == 'true'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-node@v4
#         with:
#           node-version: '20'
#           cache: 'npm'
#           cache-dependency-path: cluster-ui/package-lock.json
#       - name: Install Node.js dependencies
#         working-directory: cluster-ui
#         run: |
#           npm install -g eslint@^8.56.0 typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
#           npm ci
#       - name: Lint TypeScript
#         working-directory: cluster-ui
#         run: |
#           npx tsc --noEmit
#           npx eslint "**/*.{ts,tsx}" --fix
#       - name: Lint JavaScript
#         working-directory: cluster-ui
#         run: npx eslint "**/*.{js,jsx}" --fix