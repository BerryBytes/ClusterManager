name: Multi-language Lint

on:
  push:
    paths:
      - 'cluster-api/**'
      - 'cluster-service/**'
      - 'cluster-status/**'
      - 'cluster-ui/**'
    branches:
      - '**'  # Run on all branches
  pull_request:
    paths:
      - 'cluster-api/**'
      - 'cluster-service/**'
      - 'cluster-status/**'
      - 'cluster-ui/**'
  workflow_dispatch:

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.changed-dirs.outputs.directories }}
    steps:
      - uses: actions/checkout@v4
      - name: Get changed directories
        id: changed-dirs
        run: |
          CHANGED_DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | awk -F'/' '{print $1}' | sort -u | uniq | grep -E '^(cluster-api|cluster-service)$' || echo "")
          echo "directories=$(echo $CHANGED_DIRS | jq -R -s -c 'split(" ") | map(select(. != ""))')" >> $GITHUB_OUTPUT

  python-lint:
    needs: determine-changes
    runs-on: ubuntu-latest
    if: needs.determine-changes.outputs.directories != '[]'
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.determine-changes.outputs.directories) }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for Python files
        id: check-python
        run: |
          if find ${{ matrix.directory }} -name "*.py" -print -quit | grep -q .; then
            echo "has_python_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_python_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check-python.outputs.has_python_files == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python linting tools
        if: steps.check-python.outputs.has_python_files == 'true'
        working-directory: ${{ matrix.directory }}
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint

      - name: Run Pylint
        if: steps.check-python.outputs.has_python_files == 'true'
        working-directory: ${{ matrix.directory }}
        run: |
          find . -type f -name "*.py" -not -path "*/\.*" -exec pylint {} + || echo "Linting completed with warnings"

      # - name: Run Black
      #   if: steps.check-python.outputs.has_python_files == 'true'
      #   working-directory: ${{ matrix.directory }}
      #   run: |
      #     black --check .

      # - name: Run isort
      #   if: steps.check-python.outputs.has_python_files == 'true'
      #   working-directory: ${{ matrix.directory }}
      #   run: |
      #     isort --check-only --diff .

 

  # go-lint:
  #   # needs: changes
  #   if: needs.changes.outputs.cluster-status == 'true' && !contains(github.event.head_commit.modified, '*.py')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.22'
  #         cache: true

  #     - name: Install Go tools
  #       run: |
  #         go install golang.org/x/tools/cmd/goimports@latest
  #         go install honnef.co/go/tools/cmd/staticcheck@latest
  #         go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  #         echo "$HOME/go/bin" >> $GITHUB_PATH

  #     - name: Go Format Check
  #       working-directory: cluster-status
  #       run: |
  #         if [ -n "$(gofmt -l .)" ]; then
  #           echo "The following files need formatting:"
  #           gofmt -l .
  #           echo "Please run 'gofmt -w .' to format your code."
  #           exit 1
  #         fi

  #     - name: Go Imports Check
  #       working-directory: cluster-status
  #       run: |
  #         if [ -n "$(goimports -l .)" ]; then
  #           echo "The following files have incorrect imports:"
  #           goimports -l .
  #           echo "Please run 'goimports -w .' to fix imports."
  #           exit 1
  #         fi

  #     - name: Run golangci-lint
  #       working-directory: cluster-status
  #       run: golangci-lint run --timeout=5m

  #     - name: Run staticcheck
  #       working-directory: cluster-status
  #       run: staticcheck ./...

  # typescript-lint:
  #   # needs: changes
  #   if: needs.changes.outputs.cluster-ui == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #         cache-dependency-path: cluster-ui/package-lock.json

  #     - name: Install Node.js dependencies
  #       working-directory: cluster-ui
  #       run: |
  #         npm install -g eslint@^8.56.0 typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
  #         npm ci

  #     - name: Lint TypeScript
  #       working-directory: cluster-ui
  #       run: |
  #         npx tsc --noEmit
  #         npx eslint "**/*.{ts,tsx}" --fix

  #     - name: Lint JavaScript
  #       working-directory: cluster-ui
  #       run: npx eslint "**/*.{js,jsx}" --fix